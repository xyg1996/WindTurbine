
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog,QFrame
from PyQt5.QtWidgets import QApplication,QFileDialog
from PyQt5 import uic

from PyQt5.QtWidgets import QWidget
# import pvsimple as pvs
# from .salomegui import get_salome_pyqt
import sys
import os
import shutil
import pvsimple as pvs
from .commonfunction import LoadingMessage
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog,QFrame
from PyQt5.QtWidgets import QApplication,QFileDialog
from PyQt5 import uic
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import QDir
from PyQt5.Qt import *
from PyQt5.QtCore import QObject, pyqtSignal, pyqtSlot
from PyQt5.QtWidgets import QWidget, QApplication, QMainWindow
from .commonfunction import *
from .Workspace.workspace_ui import Ui_Workspace
from .Material.MaterialManager import Ui_Mat_Man
from .Model.ModelManager import Ui_Mod_Edi
from .BC.boundaryform import Ui_boundary_form
from .Field.FieldsettingUi import Ui_Fieldsetting
from .Solver.SolverManUi import Ui_Sol_Man
from .Scheme.SchemesettingUi import Ui_Schemesetting
from .post import (ResultFile, PlotWindow,
            ColorRep, WarpRep, ModesRep, BaseRep,
            pvcontrol, show_min_max, selection_probe, selection_plot,
            get_active_selection, get_pv_mem_use, dbg_print,
            RESULTS_PV_LAYOUT_NAME, RESULTS_PV_VIEW_NAME)
from .post.navigator import OverlayBar
from .Mesh_transfer.salome_mesh_tran import Ui_Mesh_tran
from .Mesh_generation.mesh_generationUi import Ui_Mesh_generate 
from .Computing_control.Computingcontrol import Ui_Computing_control
# from ..pyqtgraph.widgets.GraphicsLayoutWidget import GraphicsLayoutWidget
# from .Residual_error.ResidualplotUi import Ui_Residual_plot

class Workspace(QWidget):
    # def setupUi(self,Dialog):
        # Dialog.setObjectName("Dialog")
        # Dialog.resize(400,300)

    #     self.retranslateUi(Dialog)
    #     QtCore.QMetaObject.connectSlotsByName(Dialog)

    # def retranslateUi(self,Dialog):
    #     _translate=QtCore.QCoreApplication.translate
    #     Dialog.setWindowTitle(_translate("Dialog","Dialog"))

    def __init__(self,astergui, parent=None):
        # 从文件中加载UI定义
        super(Workspace,self).__init__()
        # 从 UI 定义中动态 创建一个相应的窗口对象
        # 注意：里面的控件对象也成为窗口对象的属性了
        # 比如 self.ui.button , self.ui.textEdit
        self.pv_view = None
        self.pv_overlay = None
        self.toolbuttons = None
        self.hlay = QtWidgets.QHBoxLayout(self)

        self.ui = uic.loadUi('/home/export/online3/amd_app/wxy/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/gui/demo2.ui')

        # self.ui.setupUi(self)
        # self.init_paraview()
        self.hlay.addWidget(self.ui)
        self.ui.pushButton_new.clicked.connect(self.creatProject)
        self.ui.pushButton.clicked.connect(self.getCasPath)
        self.ui.pushButton_sub.clicked.connect(self.handleCalc)

        # self.right_container_layout = QtWidgets.QHBoxLayout(self.right_container)
        # self.pv_widget = get_salome_pyqt().getViewWidget(self.pv_view)
        # self.pv_widget.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
        #                             QtWidgets.QSizePolicy.Expanding)
        # self.horizontalLayout = QtWidgets.QHBoxLayout(self)
        self.main_splitter = QtWidgets.QSplitter(QtCore.Qt.Horizontal, self)
        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
                           QtWidgets.QSizePolicy.Expanding)
        self.main_splitter.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                        QtWidgets.QSizePolicy.Expanding)
        self.hlay.addWidget(self.main_splitter)  
        # self.work_space_tool是主窗口左边标签页区域
        # self.work_space_tool = Workspace_tool(astergui)
        self.main_splitter.addWidget(self.ui)
        # self.right_container是主窗口右侧区域其中包含了paraview窗口和日志显示停靠窗口,由self.pv_splitter实现上下分割
        ## 增加paraview窗口
        self.right_container = QtWidgets.QWidget()
        self.right_container.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                QtWidgets.QSizePolicy.Expanding)
        self.right_container_layout = QtWidgets.QHBoxLayout(self.right_container)
        self.main_splitter.addWidget(self.right_container)
        self.pv_splitter = QtWidgets.QSplitter(QtCore.Qt.Vertical, self.right_container)
        self.pv_splitter.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                        QtWidgets.QSizePolicy.Expanding) 
        self.right_container_layout.addWidget(self.pv_splitter)
        self.init_paraview()
        # self.ui.splitter.addWidget(self.pv_widget)

    def update_pv_layout_view(self, full_update=True):
        """
        Updates or creates a new PV layout and view for AsterStudy
        post processing in the Results tab
        """
        import pvsimple as pvs
        from .salomegui import get_salome_pyqt

        pv_layout = pvs.GetLayoutByName(RESULTS_PV_LAYOUT_NAME)
        if not pv_layout:
            pv_layout = pvs.CreateLayout(name=RESULTS_PV_LAYOUT_NAME)

            
        self.views = pvs.GetViewsInLayout(pv_layout)
        if not self.views:
            pvs.SetActiveView(None)
            self.ren_view = pvs.CreateRenderView(guiName=RESULTS_PV_VIEW_NAME)

            self.ren_view.UseGradientBackground = 1
            pv_layout.AssignView(0, self.ren_view)

        self.pv_layout = pvs.GetLayoutByName("Layout #1")

        self.pv_widget = get_salome_pyqt().getViewWidget(self.pv_view)
        self.pv_widget.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                    QtWidgets.QSizePolicy.Expanding)

        self.splitter.addWidget(self.pv_widget)

        self.splitter.setVisible(False)
        self.splitter.setVisible(True)

        pvs.Render()

        self.pv_widget_children = [self.pv_widget]
        self.pv_widget_children += self.pv_widget.findChildren(QtWidgets.QWidget)

        to_ignore = []
        if self.pv_overlay:
            to_ignore = [self.pv_overlay] + \
                self.pv_overlay.findChildren(QtWidgets.QWidget)

        for child in self.pv_widget_children:
            if not child in to_ignore:
                child.installEventFilter(self)

    def detach(self, keep_pipeline=True):
        """
        Function called upon deactivating asterstudy, allows to properly
        remove all layouts and view from the ParaView View (salome View)
        """
        from .salomegui import get_salome_pyqt
        import pvsimple as pvs

        # Clears the PV widget and removes the event filter (right click
        # behavior) from all of its children.
        if self.pv_widget:
            for child in self.pv_widget_children:
                if child:
                    try:
                        child.removeEventFilter(self)
                    except BaseException: # pragma pylint: disable=broad-except
                        pass
            self.pv_widget_children = []
            self.pv_widget = None

        # This forces the creation of new overlay buttons upon restarting
        # the AsterStudy results tab
        self.pv_overlay = None
        self.toolbuttons = None

        # Deletes the active view and layout from paraview
        # Close the (salome) view corresponding to 'ParaView'
        if self.pv_view:
            get_salome_pyqt().closeView(self.pv_view)
        # get_salome_pyqt().closeView(self.ren_view)
        # get_salome_pyqt().closeView(self.ren_view1)
        
        # self.ren_view = None
        # self.ren_view1 = None
            pvs.RemoveLayout(self.pv_layout)
        self.pv_layout = None
        self.pv_view = None

        # Optional: clear all sources and proxies, leaving no trace!
        if not keep_pipeline:
            self.previous = {}
            self.current = None
            self.shown = None
            pxm = pvs.servermanager.ProxyManager()
            pxm.UnRegisterProxies()
            del pxm
            pvs.Disconnect()
            pvs.Connect()

    def init_paraview(self, full_load_pv=True):
        """
        Initializes, if necessary, paraview and creates a dedicated pvsimple
        view in the results tab.
        """
        from .salomegui import (get_salome_pyqt, get_salome_gui)

        if not self.pv_view:
            import time
            # dbg_print(">> Initializing PV view for the main tab...")
            start = time.time()
            self.views =  get_salome_pyqt().findViews('ParaView')
            print(self.views)
            self.pv_view = self.views[-1]
            get_salome_pyqt().activateViewManagerAndView(self.pv_view)
            paraview = self.update_pv_layout_view()
            end = time.time()
            # dbg_print("  Finished in %d seconds..." % int(end - start))

            self._finalize_pv_widget()
        else:
            self.update_pv_layout_view()
            self._finalize_pv_widget()

        if self.current:
            self.redraw()

    def _finalize_pv_widget(self):
        """
        References toolbuttons (for interactive selection) and updates the
        overlay widget if needed
        """
        if self.pv_widget:
            if not self.toolbuttons:
                self._add_toolbuttons()
            if not self.pv_overlay:
                self._add_overlay()

    def _add_toolbuttons(self):
        """
        Shortcut for referencing the toolbuttons that may need to be
        automatically activated for point and cell selections

        requires : self.pv_widget
        """
        self.toolbuttons = {'Interactive Select Cells On': None,
                            'Interactive Select Points On': None,
                            'Select Points On (d)': None,
                            'Select Cells On (s)': None,
                            }
        to_find = list(self.toolbuttons.keys())
        # Backward search since AsterStudy PV Layout is added after
        # the default one! ==>                              [::-1]
        for tbutt in self.pv_widget.findChildren(QtWidgets.QToolButton)[::-1]:
            if not to_find:
                break
            for tooltip in to_find:
                if tooltip in tbutt.toolTip():
                    self.toolbuttons[tooltip] = tbutt
                    to_find.remove(tooltip)
                    break

    def _add_overlay(self):
        """
        Add an overlay widget to the main pv_widget with a few buttons
        to control the view, save screenshots, etc.

        requires : self.pv_widget
        """

        # START
        # ol_height = 56 # Overlay height in pixels
        ol_height = 50  # Overlay height in pixels
        self.pv_overlay = OverlayBar(self.pv_widget, height=ol_height,
                                     botline=(0, 0, 255, 2)
                                     )

        # >> Buttons toolbar items
        #    Start with an empty shell widget, used for parenting toolbar buttons
        #    and enforcing a simple horizontal layout with a right spacer
        hlayo = QtWidgets.QHBoxLayout()
        hlayo.setContentsMargins(5, 5, 5, 5)
        hlayo.setSpacing(5)
        # add_button(hlayo, tooltip='Refresh view',
        #            icon='PVC Refresh',
        #            callback=self.redraw)
        # add_separator(hlayo)

        # Camera controls
        add_button(hlayo, tooltip='Project view to X (YZ-plane)',
                   icon='PVC XProj',
                   callback=lambda: pvcontrol(self, 'xproj'))
        add_button(hlayo, tooltip='Project view to Y (XZ-plane)',
                   icon='PVC YProj',
                   callback=lambda: pvcontrol(self, 'yproj'))
        add_button(hlayo, tooltip='Project view to Z (XY-plane)',
                   icon='PVC ZProj',
                   callback=lambda: pvcontrol(self, 'zproj'))

        # Display controls
        self.outline_btn = add_button(hlayo, tooltip='Toggle bounding box',
                                      icon='PVC Outline',
                                      callback=lambda: pvcontrol(
                                          self, 'outline'),)
                                    #   checkable=True)

        # >> Information labels bar
        hlayo.addStretch(1)
        self.infobar_label = QtWidgets.QLabel(self.pv_overlay)
        hlayo.addWidget(self.infobar_label)
        self.update_infobar()

        self.pv_overlay.setLayout(hlayo)

    def update_pv_layout_view(self, full_update=True):
        """
        Updates or creates a new PV layout and view for AsterStudy
        post processing in the Results tab
        """
        import pvsimple as pvs
        from .salomegui import get_salome_pyqt

        pv_layout = pvs.GetLayoutByName(RESULTS_PV_LAYOUT_NAME)
        if not pv_layout:
            pv_layout = pvs.CreateLayout(name=RESULTS_PV_LAYOUT_NAME)

            
        self.views = pvs.GetViewsInLayout(pv_layout)
        if not self.views:
            pvs.SetActiveView(None)
            self.ren_view = pvs.CreateRenderView(guiName=RESULTS_PV_VIEW_NAME)

            self.ren_view.UseGradientBackground = 1
            pv_layout.AssignView(0, self.ren_view)

        self.pv_layout = pvs.GetLayoutByName("Layout #1")

        self.pv_widget = get_salome_pyqt().getViewWidget(self.pv_view)
        self.pv_widget.setSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                    QtWidgets.QSizePolicy.Expanding)

        self.pv_splitter.addWidget(self.pv_widget)

        self.pv_splitter.setVisible(False)
        self.pv_splitter.setVisible(True)

        pvs.Render()

        self.pv_widget_children = [self.pv_widget]
        self.pv_widget_children += self.pv_widget.findChildren(QtWidgets.QWidget)

        to_ignore = []
        if self.pv_overlay:
            to_ignore = [self.pv_overlay] + \
                self.pv_overlay.findChildren(QtWidgets.QWidget)

        for child in self.pv_widget_children:
            if not child in to_ignore:
                child.installEventFilter(self)
    
    def update_infobar(self):
        """
        Method used to update the information bar below the post-processing
        controls based on the shown field (uses self.shown)
        """
        info = 'No data loaded'
        fsuffix = ''
        if self.shown:
            field, opts = self.shown.field, self.shown.opts
            comp = opts['Component'] if 'Component' in opts else ''
            if 'ColorField' in opts:
                cfield = opts['ColorField']
                if cfield != field:
                    fsuffix = ', colored by %s' % (
                        cfield.info['label'].split('(')[0])
                    if len(cfield.info['components']) > 1:
                        fsuffix += ' [%s]' % (comp)

            if not fsuffix:
                if len(field.info['components']) > 1:
                    fsuffix = ' [%s]' % (comp)

            ctime = self.ren_view.ViewTime
            # info = '<B>Concept :</B> %s; '\
            #        '<B>Field :</B> %s%s; '\
            #        '<B>Current time/frequency :</B> %g'\
            #        %(field.concept.name,
            #          field.info['label'], fsuffix, ctime)

            info = '<B><span style="color: #ffffff; background-color: #1d71b8;">'\
                   '&nbsp;Concept&nbsp;</B></span>&nbsp;%s'\
                   '&nbsp;<B><span style="color: #ffffff; background-color: #1d71b8;">'\
                   '&nbsp;Field&nbsp;</B></span>&nbsp;%s%s'\
                   '&nbsp;<B><span style="color: #ffffff; background-color: #1d71b8;">'\
                   '&nbsp;Time/Frequency&nbsp;</B></span>&nbsp;%g'\
                   % (field.concept.name,
                      field.name, fsuffix, ctime)

        if self.infobar_label:
            self.infobar_label.setText(info)


    def getCasPath(self):
        self.cwd = '/home/export/online3/amd_app/wxy'
        self.casPath = self.get_file_name('.cas')
        self.ui.lineEdit.setText(self.casPath)


    def handleCalc(self):
        self.queue = self.ui.cbox_queue.currentText()
        self.cores = self.ui.cbox_cores.currentText()
        self.maxiters = self.ui.lineEdit_maxint.text()
        self.InputInterval = self.ui.lineEdit_output.text()
        print(self.workdir, self.casPath, self.queue, self.cores, self.maxiters,  self.InputInterval)



    def creatProject(self):
        self.cwd = '/home/export/online3/amd_app/wxy'
        self.workdir = self.get_dir_name()
        self.ui.lineEdit_2.setText(self.workdir)

    def get_file_name(self,filetype):
        fname, filetype = QFileDialog.getOpenFileName(self,  
                                    "选取文件",  
                                    self.cwd, # 起始路径 
                                    "All Files (*);;OpenFoam Files (*" + filetype + ")")
        return fname

    def get_dir_name(self):
        dir_choose = QFileDialog.getExistingDirectory(self,  
                                    "选取文件夹",  
                                    self.cwd) # 起始路径
        return dir_choose

    def activate(self, enable):
        """
        Activate/deactivate workspace.

        Arguments:
            enable (bool): *True* to activate, *False* to deactivate.
        """
        self.setVisible(enable)

def add_button(layout, name='', tooltip='', icon=None,
               callback=None, checkable=False):
    """
    Adds a push button to the given parent widget and layout with some
    user-defined properties
    """
    from . import get_icon
    button = QtWidgets.QPushButton(name)
    button.setFixedWidth(100)
    if tooltip:
        button.setToolTip(tooltip)
    if icon:
        button.setIcon(get_icon(icon))
    button.setCheckable(checkable)
    if checkable:
        button.toggled.connect(callback)
    else:
        button.clicked.connect(callback)

    layout.addWidget(button)
    return button