import sys

from PyQt5 import QtWidgets, QtGui
from PyQt5 import QtWidgets, QtGui, QtCore
import vtkmodules.all as vtk
# import pyvista as vtki
# import vtk
from vtkmodules.qt.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor as QVTKWidget

__version__ = '0.1.0'
__author__ = 'xuxc'
__appname__ = 'PyPost'


class PyPostMainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(PyPostMainWindow, self).__init__()

        self.create_widgets()
        self.create_action('')
        self.create_menu()
        self.load_settings()
        self.init_vtk_view()

        self.setWindowTitle('{} - v{}'.format(__appname__, __version__))


    def create_widgets(self):
        self.central_widget = QtWidgets.QWidget(self)
        self.central_widget.setObjectName('central_widget')

        # 设置QTabWidget
        self.tab_widget = QtWidgets.QTabWidget(self.central_widget)
        self.tab_widget.setObjectName("tab_widget")
        size_policy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.tab_widget.sizePolicy().hasHeightForWidth())
        self.tab_widget.setSizePolicy(size_policy)

        # 创建result标签页
        self.set_result_tab()

        # 实例化一个QWidget，作为视图区的部件
        self.main_widget = QtWidgets.QWidget(self.central_widget)
        self.main_widget.setObjectName('main_widget')

        # 将中心部件的布局设置为垂直布局，将控件添加到布局中
        self.vertical_layout = QtWidgets.QVBoxLayout(self.central_widget)
        self.vertical_layout.setObjectName('vertical_layout')
        self.vertical_layout.addWidget(self.tab_widget)
        self.vertical_layout.addWidget(self.main_widget)
        self.setCentralWidget(self.central_widget)

    def set_result_tab(self):
        # 创建result标签页
        self.result_tab = QtWidgets.QWidget()
        self.result_tab.setObjectName('result_tab')

        # 将标签页的布局设置为网格布局，以便有序添加其它控件
        self.result_grid_layout = QtWidgets.QGridLayout(self.result_tab)
        self.result_grid_layout.setObjectName('result_grid_layout')

        # 将后处理中变形相关的控件放置到一个水平布局中
        self.deformation_horizontal_layout = QtWidgets.QHBoxLayout()
        self.deformation_horizontal_layout.setObjectName('deformation_horizontal_layout')
        # 添加一个checkbox，用来决定是否显示变形
        self.deformation_check_box = QtWidgets.QCheckBox(self.result_tab)
        self.deformation_check_box.setObjectName('deformation_check_box')
        self.deformation_check_box.setText('变形')
        # 添加一个combobox，用来决定是否显示初始形状
        self.deformation_combo_box = QtWidgets.QComboBox(self.result_tab)
        self.deformation_combo_box.setObjectName('deformation_combo_box')
        self.deformation_combo_box.addItem('仅显示变形')
        self.deformation_combo_box.addItem('初始轮廓+变形')
        # 添加一个doublespinbox，用来设置变形缩放系数
        self.deformation_scale_spinbox = QtWidgets.QDoubleSpinBox(self.result_tab)
        self.deformation_scale_spinbox.setObjectName('deformation_scale_spinbox')
        self.deformation_scale_spinbox.setPrefix('缩放 ')
        self.deformation_scale_spinbox.setSuffix(' 倍')
        self.deformation_scale_spinbox.setDecimals(4)
        # 添加一个spaceritem，让控件向左边集中
        deformation_spacer_item = QtWidgets.QSpacerItem(
            40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.deformation_horizontal_layout.addWidget(self.deformation_check_box)
        self.deformation_horizontal_layout.addWidget(self.deformation_combo_box)
        self.deformation_horizontal_layout.addWidget(self.deformation_scale_spinbox)
        self.deformation_horizontal_layout.addItem(deformation_spacer_item)

        # 将云图相关的控件放置到一个水平布局中
        self.contour_horizontal_layout = QtWidgets.QHBoxLayout()
        self.contour_horizontal_layout.setObjectName('contour_horizontal_layout')
        # 添加一个checkbox，以决定是否显示云图
        self.contour_check_box = QtWidgets.QCheckBox(self.result_tab)
        self.contour_check_box.setObjectName('contour_check_box')
        self.contour_check_box.setText('云图')
        # 添加一个combobox，以确定显示哪一个结果的云图
        self.contour_combo_box = QtWidgets.QComboBox(self.result_tab)
        self.contour_combo_box.setObjectName('contour_combo_box')
        self.contour_combo_box.addItem('总变形')
        self.contour_combo_box.addItem('x方向变形')
        self.contour_combo_box.addItem('y方向变形')
        self.contour_combo_box.addItem('z方向变形')
        self.contour_combo_box.addItem('Mises应力')
        # 添加一个spaceritem
        contour_spacer_item = QtWidgets.QSpacerItem(
            40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.contour_horizontal_layout.addWidget(self.contour_check_box)
        self.contour_horizontal_layout.addWidget(self.contour_combo_box)
        self.contour_horizontal_layout.addItem(contour_spacer_item)

        # 将控件添加到网格布局中，再将标签页添加到QTabWidget中
        self.result_grid_layout.addLayout(self.deformation_horizontal_layout, 0, 1, 1, 1)
        self.result_grid_layout.addLayout(self.contour_horizontal_layout, 1, 1, 1, 1)
        self.tab_widget.addTab(self.result_tab, '结果')

    def create_menu(self):
        self.setup_file_menu()
        self.setup_view_menu()
        self.setup_help_menu()
        status = self.statusBar()
        status.setSizeGripEnabled(False)

    def create_action(self, text, slot=None, shortcut=None, icon=None,
                      tip=None, checkable=False, signal='triggered'):
        action = QtWidgets.QAction(text, self)
        if icon is not None:
            action.setIcon(QtGui.QIcon(icon))
        if shortcut is not None:
            action.setShortcut(shortcut)
        if tip is not None:
            action.setToolTip(tip)
            action.setStatusTip(tip)
        if slot is not None:
            getattr(action, signal).connect(slot)
        if checkable:
            action.setCheckable(True)
        return action

    def add_actions(self, target, actions):
        for action in actions:
            if action is None:
                target.addSeparator()
            else:
                target.addAction(action)

    def setup_file_menu(self):
        file_menu = self.menuBar().addMenu('文件')
        file_toolbar = self.addToolBar('文件')
        file_toolbar.setObjectName('file_toolbar')
        file_open_action = self.create_action(
            '打开', self.file_open, QtGui.QKeySequence.Open,
            'images/open', '打开文件')
        file_quit_action = self.create_action(
            '退出', self.close, 'Ctrl+Q', 'images/quit', '退出')
        self.add_actions(
            file_menu, (file_open_action, None, file_quit_action))
        self.add_actions(file_toolbar, (file_open_action, file_quit_action))

    def setup_view_menu(self):
        view_menu = self.menuBar().addMenu('视图')
        view_toolbar = self.addToolBar('视图')
        view_toolbar.setObjectName('view_toolbar')
        view_fit_action = self.create_action(
            '适合窗口', self.fit_all, 'Ctrl+F', 'images/fit', '适合窗口')
        self.add_actions(view_menu, (view_fit_action, ))
        self.add_actions(view_toolbar, (view_fit_action,))

    def setup_help_menu(self):
        help_menu = self.menuBar().addMenu('帮助')
        help_action = self.create_action(
            '帮助', self.help, icon='images/help', tip='帮助')
        about_action = self.create_action(
            '关于', self.about, tip='关于')
        self.add_actions(help_menu, (help_action, about_action))

    def closeEvent(self, event):
        settings = QtCore.QSettings()
        settings.setValue('MainWindow/Geometry',
                          QtCore.QVariant(self.saveGeometry()))
        settings.setValue('MainWindow/State',
                          QtCore.QVariant(self.saveState()))

    def load_settings(self):
        # 使用QSettings恢复上次关闭时的状态
        settings = QtCore.QSettings()
        self.restoreGeometry(settings.value(
            'MainWindow/Geometry', type=QtCore.QByteArray))
        self.restoreState(settings.value(
            'MainWindow/State', type=QtCore.QByteArray))

    # def file_open1(self):
    #     # 暂时先将路径设置为当前路径，有时间再修改成最近一次使用的路径
    #     self.filename, _ = QtWidgets.QFileDialog.getOpenFileName(
    #         self, '打开文件 - vtk文件', '.', '(*)')
    #     if self.filename:
    #         print(self.filename)
    #         mesh = vtki.read(r'C:\Users\farew\Desktop\ICESIM\test\VTK\test_0.vtk')
    #         mesh.plot()


    def file_open(self):

        # 暂时先将路径设置为当前路径，有时间再修改成最近一次使用的路径
        self.filename, _ = QtWidgets.QFileDialog.getOpenFileName(
            self, '打开文件 - vtk文件', '.', '(*)')
        if self.filename:
            print(self.filename)
            self.original_model = vtk.vtkPolyDataReader()
            self.original_model.SetFileName(self.filename)
            self.original_model.Update()

            # reader = vtk.vtkOpenFOAMReader()
            # reader.SetFileName(path)
            # reader.CreateCellToPointOff()
            # reader.DisableAllPointArrays()
            # reader.Update()

            # self.original_model = vtk.vtkOpenFOAMReader()
            # self.original_model.SetFileName(self.filename)
            # self.original_model.CreateCellToPointOff()
            # # self.original_model.DecomposePolyhedraOn()
            # self.original_model.DisableAllCellArrays()
            # self.original_model.Update()

            self.original_mapper = vtk.vtkPolyDataMapper()
            self.original_mapper.SetInputConnection(self.original_model.GetOutputPort())

            self.original_actor = vtk.vtkActor()
            self.original_actor.SetMapper(self.original_mapper)
            self.original_actor.GetProperty().SetColor(0.5, 0.5, 0.5)

            self.renderer.AddActor(self.original_actor)
            self.renderer.ResetCamera()

    def fit_all(self):
        self.renderer.ResetCamera()
        self.render_window.Render()

    def help(self):
        pass


    def draw_displacement(self):
        # 已经打开结果文件才执行
        if self.filename:
            show_displacement = self.deformation_check_box.isChecked()
            # 如果显示变形，则隐藏原始模型
            if show_displacement:
                self.original_actor.VisibilityOff()
                # 模态结果跟静力学结果不同，目前的后处理仅仅是针对静力学结果
                # 只能先显示某一阶模态，这里取一阶模态进行显示
                # 以后改进
                if not self.deformation_actor:
                    self.original_model.SetVectorsName('mode1')
                    self.normals = vtk.vtkPolyDataNormals()
                    self.normals.SetInputConnection(self.original_model.GetOutputPort())
                    self.warp = vtk.vtkWarpVector()
                    self.warp.SetInputConnection(self.normals.GetOutputPort())

                    deformation_mapper = vtk.vtkDataSetMapper()
                    deformation_mapper.SetInputConnection(self.warp.GetOutputPort())
                    self.deformation_actor = vtk.vtkActor()
                    self.deformation_actor.SetMapper(deformation_mapper)
                    self.deformation_actor.GetProperty().SetColor(0.5, 0.5, 0.5)

                    self.renderer.AddActor(self.deformation_actor)

                factor = self.deformation_scale_spinbox.value()
                self.warp.SetScaleFactor(factor)

                if self.deformation_combo_box.currentText() == '仅显示变形':
                    if self.outline_actor:
                        self.outline_actor.VisibilityOff()
                    self.deformation_actor.VisibilityOn()
                elif self.deformation_combo_box.currentText() == '初始轮廓+变形':
                    if self.outline_actor:
                        self.outline_actor.VisibilityOn()
                    else:
                        outline = vtk.vtkOutlineFilter()
                        outline.SetInputConnection(self.original_model.GetOutputPort())
                        outline_mapper = vtk.vtkPolyDataMapper()
                        outline_mapper.SetInputConnection(outline.GetOutputPort())
                        self.outline_actor = vtk.vtkActor()
                        self.outline_actor.SetMapper(outline_mapper)
                        self.outline_actor.GetProperty().SetColor(1.0, 0.5, 0.5)

                        self.renderer.AddActor(self.outline_actor)
            # 不显示变形时，隐藏原始轮廓、隐藏变形，显示原始模型
            else:
                if self.deformation_actor:
                    self.deformation_actor.VisibilityOff()
                if self.outline_actor:
                    self.outline_actor.VisibilityOff()
                self.original_actor.VisibilityOn()
            self.render_window.Render()

    def draw_contour(self):
        pass

    def about(self):
        QtWidgets.QMessageBox.about(
            self, self.tr('关于PyPost'),
            """<b>PyPost</b> v{} by {}""".format(__version__, __author__))


    def init_vtk_view(self):
        # 在之前创建的main_widget上添加vtk控件
        self.vtk_vertical_layout = QtWidgets.QVBoxLayout(self.main_widget)
        self.vtk_widget = QVTKWidget(self.main_widget)
        self.vtk_vertical_layout.addWidget(self.vtk_widget)

        self.render_window = self.vtk_widget.GetRenderWindow()
        self.renderer = vtk.vtkRenderer()
        self.renderer.SetBackground(1.0, 1.0, 1.0)
        self.render_window.AddRenderer(self.renderer)
        self.render_window.Render()
        self.iren = self.render_window.GetInteractor()
        self.style = vtk.vtkInteractorStyleTrackballCamera()
        self.iren.SetInteractorStyle(self.style)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    app.setApplicationName('{}'.format(__appname__))
    app.setOrganizationName('xuxc')
    win = PyPostMainWindow()
    win.show()
    app.exec_()