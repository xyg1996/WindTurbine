
import os
import sys
# import subprocess as sp
# import linecache
import numpy as np
# from pathlib import Path

class Fluidinitial(object):
    """
    def __init__(self,workDic,acc,liqratio,xmin,xmax,ymin,ymax,zmin,zmax,
                 dyne,mp_rho,mp_nu,sp_rho,sp_nu):
        
        #self.bakdir = "/home/export/online3/amd_share/SALOME-9.3.0-CO7-SRC/template/Fluid/"
        self.bakdir = 'E:\\software study\\Qt\\1. Tanksimulator\\1. test\\tankVOF\\damBreak\\'
        self.casedir = workDic
        self.accelation = acc
        self.liquidratio = liqratio
        self.xmin = float(xmin)
        self.xmax = float(xmax)
        self.ymin = float(ymin)
        self.ymax = float(ymax)
        self.zmin = float(zmin)
        self.zmax = float(zmax)
        self.dyne = dyne
        self.mprho = mp_rho
        self.mpnu = mp_nu
        self.sprho = sp_rho
        self.spnu = sp_nu
        
        self.zero_dir = self.casedir+r'\0'                             #获取文件件所在路径
        self.cons_dir = self.casedir+r'\constant' 
        self.sys_dir = self.casedir+r'\system'
        self.bd_file = self.cons_dir+r'\polyMesh\boundary'
    """
    def __init__(self,sourceDir,workDir,**kwarg):
        
        self.bakdir = sourceDir
        self.casedir = workDir
        
        self.zero_dir = os.path.join(self.casedir,'0')                    #获取文件件所在路径
        self.cons_dir = os.path.join(self.casedir,'constant')
        self.sys_dir = os.path.join(self.casedir,'system')
        self.bd_file = os.path.join(self.cons_dir,'polyMesh','boundary')
        
        print('self.zero_dir,',self.zero_dir)
        print('self.cons_dir,',self.cons_dir)
        print('self.sys_dir,',self.sys_dir)
        print('self.bd_file,',self.bd_file)
        
        #获取几何文件名称
        self.geo_blade = kwarg['geometry']['blade']
        self.geo_cabin = kwarg['geometry']['cabin']
        self.geo_hub = kwarg['geometry']['hub']
        self.geo_tower = kwarg['geometry']['tower']
       
        #旋转中心
        self.hub_ctx = float(kwarg['hub_ctx'])
        self.hub_cty = float(kwarg['hub_cty'])
        self.hub_ctz = float(kwarg['hub_ctz'])
        
        #风机尺寸
        self.wt_radius = float(kwarg['wt_radius'])
        self.bd_prebend = float(kwarg['bd_prebend'])
        # self.cabin_len = float(kwarg['cabin_len'])
        self.overhang = float(kwarg['overhang'])
        self.tower_h = float(kwarg['tower_h'])
        
        self.cores = kwarg['cores']

        #确定计算域范围，即背景网格范围
        self.xmin = self.hub_ctx - 4*self.wt_radius
        self.xmax = self.hub_ctx + 10*self.wt_radius
        self.ymin = self.hub_cty - 4*self.wt_radius
        self.ymax = self.hub_cty + 4*self.wt_radius
        self.zmin = self.hub_ctz - self.tower_h
        self.zmax = self.hub_ctz + 4*self.wt_radius
        
        #确定旋转区域范围
        self.rotat_p1x = self.hub_ctx - self.bd_prebend*1.1
        self.rotat_p2x = self.hub_ctx + self.overhang*0.8
        self.rotat_r = self.wt_radius + (self.tower_h-self.wt_radius)/2
        
        #确定加密区域范围
        self.refine_xmin = self.hub_ctx - 2*self.wt_radius
        self.refine_xmax = self.hub_ctx + 4*self.wt_radius
        self.refine_ymin = self.hub_cty - 2*self.wt_radius
        self.refine_ymax = self.hub_cty + 2*self.wt_radius
        self.refine_zmin = self.zmin
        self.refine_zmax = self.hub_ctz + 2*self.rotat_r
        
        self.localpx = self.hub_ctx + 5*self.wt_radius
        
        #确定叶片加密次数
        self.bd_msize =  self.wt_radius / 200
        self.blade_rfl_max = int(np.log2((self.xmax -self.xmin)/100/0.005))
        self.blade_rfl_min = int(np.log2((self.xmax -self.xmin)/100/self.bd_msize))
        
        #确定轮毂加密次数
        self.hub_rfl_max = self.blade_rfl_min
        self.hub_rfl_min = self.blade_rfl_min - 2
        
        #确定机舱加密次数
        self.cabin_rfl_max = self.blade_rfl_min
        self.cabin_rfl_min = self.blade_rfl_min - 2
        
        #确定塔架加密次数
        self.tower_rfl_max = self.blade_rfl_min - 1
        self.tower_rfl_min = self.blade_rfl_min - 2
        
        #确定旋转域加密次数
        self.rotat_rfl_max = self.blade_rfl_min-1
        
        #确定加密区加密次数
        self.refine_rfl_max = self.blade_rfl_min - 2
        
    def blockMeshDict_write(self):
        
        bm_xmin = float('%.4f' % self.xmin)
        bm_xmax = float('%.4f' % self.xmax)
        bm_ymin = float('%.4f' % self.ymin)
        bm_ymax = float('%.4f' % self.ymax)
        bm_zmin = float('%.4f' % self.zmin)
        bm_zmax = float('%.4f' % self.zmax)
        
        with open(self.sys_dir+'/blockMeshDict',"w") as f:
            f.write("FoamFile\n{\n    version     2.0;\n")
            f.write("    format     ascii;\n    class      dictionary;\n")
            f.write("""    location   "system";\n    object     blockMeshDict;\n}""")
            f.write("\n//*************************************************//\n")
            f.write("\nconvertToMeters 1;\n\nvertices\n(\n")
            f.write("    ("+str(bm_xmin)+" "+str(bm_ymin)+" "+str(bm_zmin)+")\n")
            f.write("    ("+str(bm_xmax)+" "+str(bm_ymin)+" "+str(bm_zmin)+")\n")
            f.write("    ("+str(bm_xmax)+" "+str(bm_ymax)+" "+str(bm_zmin)+")\n")
            f.write("    ("+str(bm_xmin)+" "+str(bm_ymax)+" "+str(bm_zmin)+")\n")
            f.write("    ("+str(bm_xmin)+" "+str(bm_ymin)+" "+str(bm_zmax)+")\n")
            f.write("    ("+str(bm_xmax)+" "+str(bm_ymin)+" "+str(bm_zmax)+")\n")
            f.write("    ("+str(bm_xmax)+" "+str(bm_ymax)+" "+str(bm_zmax)+")\n")
            f.write("    ("+str(bm_xmin)+" "+str(bm_ymax)+" "+str(bm_zmax)+")\n")
            f.write(");\n\nblocks\n(\n    hex (0 1 2 3 4 5 6 7) ")
            #f.write("("str(meshnum_x)+" "+str(meshnum_y)+" "+str(meshnum_z)+")")
            f.write("(100 100 100)")
            f.write(" simpleGrading (1 1 1)\n);\n\nedges\n(\n);\n\n")
            f.write("boundary\n(\n")
            f.write("     farField\n     {\n         type wall;\n         faces\n")
            f.write("         (\n             (0 4 5 1)\n             (4 7 6 5)\n")
            f.write("             (3 2 6 7)\n         );\n     }\n\n")
            f.write("     ground\n     {\n         type wall;         faces\n")
            f.write("         (\n             (0 1 2 3)\n         );\n     }\n")
            f.write("     inlet\n     {\n         type patch;         faces\n")
            f.write("         (\n             (1 5 6 2)\n         );\n     }\n")
            f.write("     outlet\n     {\n         type patch;         faces\n")
            f.write("         (\n             (0 4 7 3)\n         );\n     }\n")
            f.write(" );\n// ************************************************//")
            f.close
            
    def SHMDict_write(self):
        
        rotat_p1x = float('%.3f' % self.rotat_p1x)
        rotat_p2x = float('%.3f' % self.rotat_p2x)
        rotat_r = float('%.3f' % self.rotat_r)
        
        rb_minx = float('%.3f' % self.refine_xmin)
        rb_maxx = float('%.3f' % self.refine_xmax)
        rb_miny = float('%.3f' % self.refine_ymin)
        rb_maxy = float('%.3f' % self.refine_ymax)
        rb_minz = float('%.3f' % self.refine_zmin)
        rb_maxz = float('%.3f' % self.refine_zmax)

        bd_emesh = self.geo_blade.split('.')[0]
        cabin_emesh = self.geo_cabin.split('.')[0]
        hub_emesh = self.geo_hub.split('.')[0]
        tower_emesh = self.geo_tower.split('.')[0]

        with open(self.bakdir+'/system/snappyHexMeshDict') as f:
            lines = f.readlines()
            f.close
        with open(self.sys_dir+'/snappyHexMeshDict',"w") as f:
            #f.write("FoamFile\n{\n    version     2.0;\n")
            #f.write("    format     ascii;\n    class      dictionary;\n")
            #f.write("    object      snappyHexMeshDict;\n}\n")
            f.writelines(lines[0:16])
            f.write("castellatedMesh true;\n")
            f.write("snap            true;\n")
            f.write("addLayers       true;\n\n")
            f.write("geometry\n{\n")
            #风机几何定义
            f.write('    '+self.geo_blade+'\n')
            f.write("    {\n")
            f.write("        type triSurfaceMesh;\n")
            f.write("        name blade;\n")
            f.write("    }\n\n")
            
            f.write('    '+self.geo_hub+'\n')
            f.write("    {\n")
            f.write("        type triSurfaceMesh;\n")
            f.write("        name hub;\n")
            f.write("    }\n\n")
            
            f.write('    '+self.geo_cabin+'\n')
            f.write("    {\n")
            f.write("        type triSurfaceMesh;\n")
            f.write("        name cabin;\n")
            f.write("    }\n\n")
            
            f.write('    '+self.geo_tower+'\n')
            f.write("    {\n")
            f.write("        type triSurfaceMesh;\n")
            f.write("        name tower;\n")
            f.write("    }\n\n")
            
            """
            for geometry in self.geometry_list:
                f.write('    '+geometry+'.stl\n')
                f.write("    {\n")
                f.write("        type triSurfaceMesh;\n")
                f.write("        name "+geometry+";\n")
                f.write("    }\n\n")
            """
            #旋转域定义    
            f.write("     Cylinder\n     {\n")
            f.write("         type        searchableCylinder;\n")
            f.write("         point1      ("+str(rotat_p1x)+" "+str(self.hub_cty)+" "+str(self.hub_ctz) +");\n")
            f.write("         point2      ("+str(rotat_p2x)+" "+str(self.hub_cty)+" "+str(self.hub_ctz) +");\n")
            f.write("         radius      "+str(rotat_r)+";\n     }\n\n")
            #加密区定义
            # f.write("     refineBox\n     {\n")
            # f.write("         type        searchableBox;\n")
            # f.write("         min         ("+str(rb_minx)+" "+str(rb_miny)+" "+str(rb_minz)+");\n")
            # f.write("         max         ("+str(rb_maxx)+" "+str(rb_maxy)+" "+str(rb_maxz)+");\n")
            # f.write("     }\n};\n\n")
            f.write("};\n\n")
            
            #castellatedMeshControls 参数定义
            f.write("castellatedMeshControls\n{\n")
            f.write("     maxLocalCells 1000000;\n\n")
            f.write("     maxGlobalCells 20000000;\n\n")
            f.write("     minRefinementCells 0;\n\n")
            f.write("     maxLoadUnbalance 0.10;\n\n")
            f.write("     nCellsBetweenLevels 4;\n\n")
            #features
            f.write("     features\n     (\n")
            f.write("         {\n")
            f.write("             file        \""+bd_emesh+".eMesh\";\n")
            f.write("             level       "+str(self.blade_rfl_max)+";\n")
            f.write("         }\n\n")
            
            f.write("         {\n")
            f.write("             file        \""+cabin_emesh+".eMesh\";\n")
            f.write("             level       "+str(self.hub_rfl_max)+";\n")
            f.write("         }\n\n")
            
            f.write("         {\n")
            f.write("             file        \""+hub_emesh+".eMesh\";\n")
            f.write("             level       "+str(self.cabin_rfl_max)+";\n")
            f.write("         }\n\n")
            
            f.write("         {\n")
            f.write("             file        \""+tower_emesh+".eMesh\";\n")
            f.write("             level       "+str(self.tower_rfl_max)+";\n")
            f.write("         }\n     );\n")
            #refinementSurfaces
            f.write("     refinementSurfaces\n     {\n")
            #旋转域边界加密
            f.write("         Cylinder\n         {\n")
            f.write("             level       ("+str(self.rotat_rfl_max)+" "+
                                              str(self.rotat_rfl_max)+");\n")
            f.write("             faceType    boundary;\n")
            f.write("             cellZone    Cylinder;\n")
            f.write("             faceZone    Cylinder;\n")
            f.write("             cellZoneInside  inside;\n         }\n\n")
            #风机加密区域边界加密
            # f.write("         refineBox\n         {\n")
            # f.write("             level       ("+str(self.refine_rfl_max)+" "+
            #                                   str(self.refine_rfl_max)+");\n")
            # #f.write("             faceType    boundary;\n")
            # f.write("             cellZone    refineBox;\n")
            # #f.write("             faceZone    refineBox;\n")
            # f.write("             cellZoneInside  inside;\n         }\n\n")
            #风机表面加密
            f.write("         blade\n         {\n")
            f.write("            level       ("+str(self.blade_rfl_min)+" "+
                                              str(self.blade_rfl_max)+");\n")
            f.write("         }\n\n")
            
            f.write("         hub\n         {\n")
            f.write("            level       ("+str(self.hub_rfl_min)+" "+
                                              str(self.hub_rfl_max)+");\n")
            f.write("         }\n\n")
            
            f.write("         cabin\n         {\n")
            f.write("            level       ("+str(self.cabin_rfl_min)+" "+
                                              str(self.cabin_rfl_max)+");\n")
            f.write("         }\n\n")
            
            f.write("         tower\n         {\n")
            f.write("            level       ("+str(self.tower_rfl_min)+" "+
                                              str(self.tower_rfl_max)+");\n")
            f.write("         }\n     }\n\n")
            
            f.write("     resolveFeatureAngle 5;\n\n")
            #域加密
            f.write("     refinementRegions\n     {\n")
            #旋转域
            f.write("         Cylinder\n         {\n")
            f.write("             mode        inside;\n")
            f.write("             levels      ((1E15 "+str(self.rotat_rfl_max)+"));\n")
            f.write("         }\n\n")
            #风机加密区域
            # f.write("         refineBox\n         {\n")
            # f.write("             mode        inside;\n")
            # f.write("             levels      ((1E15 "+str(self.refine_rfl_max)+"));\n")
            f.write("}\n\n")
            
            f.write("     locationInMesh ("+str(self.localpx)+" 0 0);\n")
            f.write("     allowFreeStandingZoneFaces false;\n}\n\n")
            
            #snapcontrol
            f.write("snapControls\n{\n\n")
            f.write("     nSmoothPatch 3;\n\n")
            f.write("     tolerance 4.0;\n\n")
            f.write("     nSolveIter 300;\n\n")
            f.write("     nRelaxIter 20;\n\n")
            f.write("         nFeatureSnapIter 30;\n\n")
            f.write("         implicitFeatureSnap true;\n\n")
            f.write("         explicitFeatureSnap false;\n\n")
            f.write("         multiRegionFeatureSnap true;\n}\n\n")
            
            #addLayersControls
            f.write("addLayersControls\n{\n\n")
            f.write("     relativeSizes true;\n\n")
            
            f.write("     layers\n     {\n")
            f.write("        blade{nSurfaceLayers 10;}\n")
            f.write("        hub{nSurfaceLayers 10;}\n")
            f.write("        cabin{nSurfaceLayers 10;}\n")
            f.write("        tower{nSurfaceLayers 10;}\n")
            f.write("     }\n\n")
            
            f.write("     expansionRatio 1.1;\n\n")
            f.write("     finalLayerThickness 0.1;\n\n")
            f.write("     minThickness 0.001;\n\n")
            f.write("     nGrow 0;\n\n")
            f.write("     featureAngle 30;\n\n")
            f.write("     nRelaxIter 3;\n\n")
            f.write("     nSmoothSurfaceNormals 1;\n\n")
            f.write("     nSmoothNormals 3;\n\n")
            f.write("     nSmoothThickness 10;\n\n")
            f.write("     maxFaceThicknessRatio 0.5;\n\n")
            f.write("     maxThicknessToMedialRatio 0.3;\n\n")
            f.write("     minMedianAxisAngle 90;\n\n")
            f.write("     nBufferCellsNoExtrude 0;\n\n")
            f.write("     nLayerIter 50;\n}\n\n")
            
            #meshQualityControls
            #f.write("meshQualityControls\n{\n")
            #f.write("    #include \"meshQualityDict\"\n}\n\n")
            f.writelines(lines[374:441])
                    
            f.write("mergeTolerance 1E-6;\n\n")
            f.writelines(lines[446:448])
            f.close

        with open(self.bakdir+'/system/surfaceFeatureExtractDict') as f:
            lines = f.readlines()
        with open(self.sys_dir+'/surfaceFeatureExtractDict',"w") as f:
            f.writelines(lines[0:16])
            for i in parame['geometry'].values():
                f.write(i+"\n")
                f.write('{\n    #include "surfaceFeatureExtractDictDefaults"\n}\n\n')

        #并行分块decomposeParDict文件
        with open(self.bakdir+'/system/decomposeParDict') as f:
            lines = f.readlines()
            f.close
        with open(self.sys_dir+'/decomposeParDict',"w") as f:
            f.writelines(lines[0:17])
            f.write('numberOfSubdomains '+self.cores+';\n')
            f.writelines(lines[20:])
            f.close

        #p配置of300 controlDict
        with open(self.bakdir+'/system/controlDict') as f:
            lines = f.readlines()
            f.close
        with open(self.sys_dir+'/controlDict',"w") as f:
            f.writelines(lines[:])

    
if __name__ == '__main__':
    
    sourcedir = '/usr/sw-cluster/simforge/WINDSIM/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/gui/wp/sourceDir/.'
    if len(sys.argv) > 2:
        try:
            # transfer(sys.argv[-2], sys.argv[-1])
            workdir = sys.argv[1]
            parame = eval(' '.join((i) for i in sys.argv[2:]))
            print(workdir,parame)
            queue = parame['queue']
            cores = parame['cores']
            os.chdir(workdir)
            fname = os.path.basename(workdir)+'.foam'
            os.system('touch '+ fname)         
        except Exception as e:
            print(e)
    # workdir ='/home/verney/wptest3'
    
    # parame = {'hub_ctx':'0','hub_cty':'0','hub_ctz':'0',
    #               'wt_radius':'2.25','bd_prebend':'0.8','cabin_len':'3',
    #               'overhang':'2','tower_h':'5.5',
    #               'geometry':
    #                   {
    #                           'blade':'mexicorotor_blade','cabin':'mexicorotor_cabin',
    #                           'tower':'mexicorotor_tower','hub':'mexicorotor_hub'
    #                   }
    #          }
    
    #geometry = dict(blade='blade.stl',cabin='canbin.stl',tower='tower.stl',
    #                hub='hub.stl')
    #parame = dict(hub_ctx='0',hub_cty='0',hub_ctz='0',
    #              wt_radius='1.7',bd_prebend='0',cabin_len='1',
    #              over_hang='1.2',tower_h='3',geometry)
    casetest = Fluidinitial(sourcedir,workdir,**parame)
    
    casetest.blockMeshDict_write()
    casetest.SHMDict_write()
    
    os.system('echo 网格转换中……')
    try:
        os.system('. /usr/sw-cluster/simforge/WINDSIM/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/gui/wp/runof300.sh '
                '&& blockMesh && surfaceFeatureExtract ' 
                '&& /usr/sw-mpp/bin/bsub -I -q '+queue+' decomposePar -force '
                '&& /usr/sw-mpp/bin/bsub -I -q '+queue+' -n '+cores + ' snappyHexMesh -overwrite -parallel '
                '&& /usr/sw-mpp/bin/bsub -I  -q '+queue+' -n '+cores +' -o log.checkMesh checkMesh -parallel '
                '&& /usr/sw-mpp/bin/bsub -I  -q '+queue+' -n '+cores +' -o log.createPatch createPatch -overwrite -parallel')
    except  Exception as e:
        print(' something is wrong')
        print(e)



    # os.system('. ~/SHARE/activeof300 && blockMesh && surfaceFeatureExtract ')
    # os.system('. /usr/sw-cluster/simforge/ICESIM/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/gui/cas2foam/run.sh  '
    #              '&&  /usr/sw-mpp/bin/bsub -I -q q_x86_share decomposePar -force && /usr/sw-mpp/bin/bsub -I -q q_x86_share -n 120 snappyHexMesh -parallel'
    #              '&& /usr/sw-mpp/bin/bsub -I  -q q_x86_share -n 120 checkMesh -parallel && /usr/sw-mpp/bin/bsub -I  -q q_x86_share -n 120 createPatch -parallel ')
