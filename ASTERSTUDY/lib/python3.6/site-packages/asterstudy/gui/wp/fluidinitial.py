

"""
Created on Sun Dec 23 10:24:39 2018

@author: longmao
"""
import os
import sys
# import subprocess as sp
import linecache
# import math
# from pathlib import Path
from turbulent_cal import Turbu_cal
from argparse import ArgumentParser
import ast

class Fluidinitial(object):
 
    def __init__(self,sourceDir,workDir,**kwarg):
        
        #self.bakdir = "/home/export/online3/amd_share/SALOME-9.3.0-CO7-SRC/template/Fluid/"
        self.bakdir = sourceDir
        self.casedir = workDir
        self.windspeed = kwarg['windspeed']
        self.rpm = kwarg['rpm']
        self.atm = kwarg['atm']
        self.rho = kwarg['rho']
        self.nu = kwarg['nu']
        self.para_num = kwarg['para_num']
        
        self.writestep = kwarg['writestep']
        self.runtime = kwarg['runtime']
        
        self.wt_radius = kwarg['wt_radius']
        self.hub_ctx = kwarg['hub_ctx']
        self.hub_cty = kwarg['hub_cty']
        self.hub_ctz = kwarg['hub_ctz']

        #时间步长和最大库朗数
        self.delt_time = 1e-7
        self.maxCo = 0.5
        
        # self.zero_dir = self.casedir+r'\0'                             #获取文件件所在路径
        # self.cons_dir = self.casedir+r'\constant' 
        # self.sys_dir = self.casedir+r'\system'
        # self.bd_file = self.cons_dir+r'\polyMesh\boundary'   

        self.zero_dir = os.path.join(self.casedir,'0/')                    #获取文件件所在路径
        self.cons_dir = os.path.join(self.casedir,'constant/')
        self.sys_dir = os.path.join(self.casedir,'system/')
        self.bd_file = os.path.join(self.cons_dir,'polyMesh','boundary/')

        print('self.zero_dir,',self.zero_dir)
        print('self.cons_dir,',self.cons_dir)
        print('self.sys_dir,',self.sys_dir)
        print('self.bd_file,',self.bd_file)
     
    def siminitial(self):
        
        self.diameter = 2*float(self.wt_radius)
        velocity_list = self.windspeed.split()
        print("ux:", velocity_list[0])
        print("uy:", velocity_list[1])
        print("uz:", velocity_list[2])
        velocity = (float(velocity_list[0])**2+float(velocity_list[1])**2+float(velocity_list[2])**2)**0.5
        print("u:", velocity)
        print("diameter:", self.diameter)
        

        tur_coff = Turbu_cal(velocity,self.diameter,self.nu,self.rho)        
        tur = tur_coff.ke_cal()
        tur_nut = 0;
        #print("tur is:",tur)
        #print("Re: ",self.Re)
        #print("k: ",self.tur_energe)
        #print("e: ",self.tur_dis_e)
        #print("w: ",self.tur_dis_w)
        
       
        #initialize 0/U
        with open(self.bakdir+'/0/U') as f:
            lines = f.readlines()
            f.close
        with open(self.zero_dir+'U',"w") as f:
            f.writelines(lines[0:19])
            f.write('internalField   uniform ('+self.windspeed+');\n')
            f.writelines(lines[21:])
            f.close
            
        #initialize 0/p_rgh
        with open(self.bakdir+'/0/p') as f:
            lines = f.readlines()
            f.close
        with open(self.zero_dir+'/p',"w") as f:
            f.writelines(lines[0:19])
            f.write('internalField   uniform '+self.atm+';\n')
            f.writelines(lines[21:])
            f.close    
        
        #initialize 0/k        
        with open(self.bakdir+'/0/k') as f:
            lines = f.readlines()
            f.close
        with open(self.zero_dir+'k',"w") as f:
            f.writelines(lines[0:19])
            f.write('internalField   uniform '+str(tur[0])+';\n')
            f.writelines(lines[21:])
            f.close 
        
        #initialize 0/epsilon
        with open(self.bakdir+'/0/epsilon') as f:
            lines = f.readlines()
            f.close
        with open(self.zero_dir+'epsilon',"w") as f:
            f.writelines(lines[0:19])
            f.write('internalField   uniform '+str(tur[1])+';\n')
            f.writelines(lines[21:])
            f.close 

        #initialize 0/omega
        with open(self.bakdir+'/0/omega') as f:
            lines = f.readlines()
            f.close
        with open(self.zero_dir+'omega',"w") as f:
            f.writelines(lines[0:19])
            f.write('internalField   uniform '+str(tur[2])+';\n')
            f.writelines(lines[21:])
            f.close 
       
        #initialize 0/nut
        with open(self.bakdir+'/0/nut') as f:
            lines = f.readlines()
            f.close
        with open(self.zero_dir+'nut',"w") as f:
            f.writelines(lines[0:19])
            f.write('internalField   uniform '+str(tur_nut)+';\n')
            f.writelines(lines[21:])
            f.close 
        
        # initilize constant/transportProperties
        with open(self.bakdir+'/constant/transportProperties') as f:
            lines = f.readlines()
            f.close
        with open(self.cons_dir+'transportProperties',"w+") as f:
            f.writelines(lines[0:19])
            f.write('    nu              '+self.nu+';\n')
            f.writelines(lines[21:])
            f.close
        
        # initilize constant/dynamicMeshDict
        with open(self.bakdir+'/constant/dynamicMeshDict') as f:
            lines = f.readlines()
            f.close
        with open(self.cons_dir+'dynamicMeshDict',"w+") as f:
            f.writelines(lines[0:28])
            f.write('        origin      ('+self.hub_ctx+' '+self.hub_cty+' '
                                          +self.hub_ctz+');\n')
            f.write('        axis        (1 0 0);')
            f.write('        omega       '+self.rpm+';\n')
            f.writelines(lines[32:])
            f.close
                                  
        # initilize system/controlDict
        deltaT = float(self.writestep)
        runtime = float(self.runtime)
        with open(self.bakdir+'/system/controlDict-41') as f:
            lines = f.readlines()
            f.close
        #加速阶段controlDict文件
        with open(self.sys_dir+'controlDict',"w") as f:
            f.writelines(lines[0:21])
            f.write('startTime       0;\n')
            f.writelines(lines[22:25])
            f.write('endTime         '+str(runtime)+';\n\n')
            #f.write('deltaT          '+str(deltaT)+';\n')
            f.write('deltaT          '+str(self.delt_time)+';\n')
            f.writelines(lines[28:31])
            f.write('writeInterval   '+str(deltaT)+';\n')
            f.writelines(lines[32:])
            f.close
       
        #并行分块decomposeParDict文件
        # with open(self.bakdir+'/system/decomposeParDict') as f:
        #     lines = f.readlines()
        #     f.close
        # with open(self.sys_dir+'decomposeParDict',"w") as f:
        #     f.writelines(lines[0:17])
        #     f.write('numberOfSubdomains '+self.para_num+';\n')
        #     f.writelines(lines[20:])
        #     f.close
                      
    def findboundary(self):
        boundary=[]
        with open(self.bd_file) as f:     
          for line,content in enumerate(f,1):
              if "type" in content:
                  #line2=line-2
                  count = linecache.getline(self.bd_file,line-2)
                  boundary.append(count.strip())
        return boundary
    

    
if __name__ == '__main__':
    
    # sourcedir = '/home/export/online3/amd_app/Zhouhl/Project/WindSim/test/sourceDir'

    sourcedir = '/usr/sw-cluster/simforge/WINDSIM/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/gui/wp/sourceDir/.'

    # if len(sys.argv) > 2:
    #     try:
    #         # transfer(sys.argv[-2], sys.argv[-1])
    #         workdir = sys.argv[1]
    #         parame = eval(' '.join((i) for i in sys.argv[2:]))
    #         print(workdir,parame)
    #         os.chdir(workdir)
    #     except Exception as e:
    #         print(e)

    # workdir ='/home/export/online3/amd_app/Zhouhl/Project/WindSim/test/workDir'
    
    # parame = {'windspeed':'15 0 0','atm':'101325','rho':'1.205','nu':'1.8e-5',
    #           'hub_ctx':'0','hub_cty':'0','hub_ctz':'0','wt_radius':'5',
    #           'writestep':'0.05','runtime':'4','rpm':'24','para_num':'240'}

    parser = ArgumentParser()
    parser.add_argument('workdir', type=str, help='workdir')
    parser.add_argument('parame', type=ast.literal_eval, help='传入的字典')

    args = parser.parse_args()
    workdir = args.workdir
    parame = args.parame
    print(workdir, parame)
    os.chdir(workdir)
    queue = parame['queue']
    cores = parame['para_num']


    
    casetest = Fluidinitial(sourcedir,workdir,**parame)
   
    #casetest.meshinitial()
    casetest.siminitial()
    num = int(int(cores)/20)

    os.system('echo 提交计算中……')
    os.system(' ./setPrBC-parallel.sh '+str(num)+' | tee log.setPrBC-parallel' )
    os.system('. /usr/sw-cluster/simforge/WINDSIM/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/gui/wp/runof41.sh '+
            ' &&  /usr/sw-mpp/bin/bsub -I -q '+queue+' -n '+cores + ' -o log -e log.error pimpleDyMFoam -parallel ')
    
    




